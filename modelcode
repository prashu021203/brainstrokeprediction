import numpy as np
import pandas as pd

df=pd.read_csv(r"C:\Users\prash\complete data (1).csv")

X = df.iloc[:, :-1]
y = df.iloc[:, -1]

gender = pd.get_dummies(df[['gender']],drop_first= 1,dtype='int')
married = pd.get_dummies(df[['ever_married']], drop_first= True,dtype='int')
smoking = pd.get_dummies(df[['smoking_status']], drop_first= True,dtype='int')
work = pd.get_dummies(df[['work_type']], drop_first= True,dtype='int')
residence = pd.get_dummies(df[['Residence_type']], drop_first= True,dtype='int')

categorical_features = ['gender', 'ever_married', 'work_type', 'Residence_type','smoking_status']

data = pd.concat([df, gender, married, work, residence, smoking], axis = 1)
data = data.drop(columns=categorical_features, axis=1)
data = data.drop('id',axis=1)

X = data.drop(['stroke'], axis=1)
y = data['stroke']

X=X.drop('gender_Other',axis=1)

from imblearn.over_sampling import RandomOverSampler
ros = RandomOverSampler(sampling_strategy=1) 
X_res, y_res = ros.fit_resample(X, y)

x=X_res
y=y_res

x.to_csv("C:\\Users\\prash\\transforemddata.csv",index="True")
y.to_csv("C:\\Users\\prash\\dataa23.csv",index="True")

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train_std = sc.fit_transform(x_train)
x_test_std = sc.transform(x_test)

x_train_col=pd.DataFrame(x_train_std,columns=['age','hypertension','heart_disease','avg_glucose_level','bmi','gender_Male','ever_married_Yes','work_type_Never_worked','work_type_Private','work_type_Self-employed','work_type_children','Residence_type_Urban','smoking_status_formerly','never smoked','smoking_status_smokes'])

from sklearn.svm import SVC
model = SVC(kernel = 'poly')
model.probability=True
model.fit(x_train_std, y_train)
model.score(x_test_std,y_test)

import warnings
warnings.filterwarnings("ignore", category=UserWarning)


y_pred=model.predict(x_test_std)

kkp=np.array([[71.0,0,0,102.87,27.2,1,1,0,1,0,0,1,1,0,0]])
pos_s= sc.transform(kkp)
ll=model.predict(pos_s)
p_l=model.predict_proba(pos_s)
print(ll)

ddn=np.array([[38.0,0,0,84.31,25.9,0,1,0,1,0,0,0,0,0,1]])
neg_s= sc.transform(ddn)
lll=model.predict(neg_s)
n_s=model.predict_proba(neg_s)
print(lll)
